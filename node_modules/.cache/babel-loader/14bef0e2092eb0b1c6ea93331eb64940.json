{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/reidcrawford/Desktop/work/react-project/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    <style>\\n      :host {\\n        display: inline-block;\\n      }\\n\\n      :host([hidden]) {\\n        display: none !important;\\n      }\\n\\n      :host([opened]) {\\n        pointer-events: auto;\\n      }\\n\\n      [part=\\\"text-field\\\"] {\\n        width: 100%;\\n        min-width: 0;\\n      }\\n    </style>\\n\\n\\n    <vaadin-text-field id=\\\"input\\\" role=\\\"application\\\" autocomplete=\\\"off\\\" on-focus=\\\"_focus\\\" value=\\\"{{_userInputValue}}\\\" invalid=\\\"[[invalid]]\\\" label=\\\"[[label]]\\\" name=\\\"[[name]]\\\" placeholder=\\\"[[placeholder]]\\\" required=\\\"[[required]]\\\" disabled=\\\"[[disabled]]\\\" readonly=\\\"[[readonly]]\\\" error-message=\\\"[[errorMessage]]\\\" clear-button-visible=\\\"[[clearButtonVisible]]\\\" aria-label$=\\\"[[label]]\\\" part=\\\"text-field\\\" theme$=\\\"[[theme]]\\\">\\n      <slot name=\\\"prefix\\\" slot=\\\"prefix\\\"></slot>\\n      <div part=\\\"toggle-button\\\" slot=\\\"suffix\\\" on-tap=\\\"_toggle\\\" role=\\\"button\\\" aria-label$=\\\"[[i18n.calendar]]\\\" aria-expanded$=\\\"[[_getAriaExpanded(opened)]]\\\"></div>\\n    </vaadin-text-field>\\n\\n    <vaadin-date-picker-overlay id=\\\"overlay\\\" fullscreen$=\\\"[[_fullscreen]]\\\" theme$=\\\"[[__getOverlayTheme(theme, _overlayInitialized)]]\\\" on-vaadin-overlay-open=\\\"_onOverlayOpened\\\" on-vaadin-overlay-close=\\\"_onOverlayClosed\\\" disable-upgrade=\\\"\\\">\\n      <template>\\n        <vaadin-date-picker-overlay-content id=\\\"overlay-content\\\" i18n=\\\"[[i18n]]\\\" fullscreen$=\\\"[[_fullscreen]]\\\" label=\\\"[[label]]\\\" selected-date=\\\"{{_selectedDate}}\\\" slot=\\\"dropdown-content\\\" focused-date=\\\"{{_focusedDate}}\\\" show-week-numbers=\\\"[[showWeekNumbers]]\\\" min-date=\\\"[[_minDate]]\\\" max-date=\\\"[[_maxDate]]\\\" role=\\\"dialog\\\" on-date-tap=\\\"_close\\\" part=\\\"overlay-content\\\" theme$=\\\"[[__getOverlayTheme(theme, _overlayInitialized)]]\\\">\\n        </vaadin-date-picker-overlay-content>\\n      </template>\\n    </vaadin-date-picker-overlay>\\n\\n    <iron-media-query query=\\\"[[_fullscreenMediaQuery]]\\\" query-matches=\\\"{{_fullscreen}}\\\">\\n    </iron-media-query>\\n\"], [\"\\n    <style>\\n      :host {\\n        display: inline-block;\\n      }\\n\\n      :host([hidden]) {\\n        display: none !important;\\n      }\\n\\n      :host([opened]) {\\n        pointer-events: auto;\\n      }\\n\\n      [part=\\\"text-field\\\"] {\\n        width: 100%;\\n        min-width: 0;\\n      }\\n    </style>\\n\\n\\n    <vaadin-text-field id=\\\"input\\\" role=\\\"application\\\" autocomplete=\\\"off\\\" on-focus=\\\"_focus\\\" value=\\\"{{_userInputValue}}\\\" invalid=\\\"[[invalid]]\\\" label=\\\"[[label]]\\\" name=\\\"[[name]]\\\" placeholder=\\\"[[placeholder]]\\\" required=\\\"[[required]]\\\" disabled=\\\"[[disabled]]\\\" readonly=\\\"[[readonly]]\\\" error-message=\\\"[[errorMessage]]\\\" clear-button-visible=\\\"[[clearButtonVisible]]\\\" aria-label\\\\$=\\\"[[label]]\\\" part=\\\"text-field\\\" theme\\\\$=\\\"[[theme]]\\\">\\n      <slot name=\\\"prefix\\\" slot=\\\"prefix\\\"></slot>\\n      <div part=\\\"toggle-button\\\" slot=\\\"suffix\\\" on-tap=\\\"_toggle\\\" role=\\\"button\\\" aria-label\\\\$=\\\"[[i18n.calendar]]\\\" aria-expanded\\\\$=\\\"[[_getAriaExpanded(opened)]]\\\"></div>\\n    </vaadin-text-field>\\n\\n    <vaadin-date-picker-overlay id=\\\"overlay\\\" fullscreen\\\\$=\\\"[[_fullscreen]]\\\" theme\\\\$=\\\"[[__getOverlayTheme(theme, _overlayInitialized)]]\\\" on-vaadin-overlay-open=\\\"_onOverlayOpened\\\" on-vaadin-overlay-close=\\\"_onOverlayClosed\\\" disable-upgrade=\\\"\\\">\\n      <template>\\n        <vaadin-date-picker-overlay-content id=\\\"overlay-content\\\" i18n=\\\"[[i18n]]\\\" fullscreen\\\\$=\\\"[[_fullscreen]]\\\" label=\\\"[[label]]\\\" selected-date=\\\"{{_selectedDate}}\\\" slot=\\\"dropdown-content\\\" focused-date=\\\"{{_focusedDate}}\\\" show-week-numbers=\\\"[[showWeekNumbers]]\\\" min-date=\\\"[[_minDate]]\\\" max-date=\\\"[[_maxDate]]\\\" role=\\\"dialog\\\" on-date-tap=\\\"_close\\\" part=\\\"overlay-content\\\" theme\\\\$=\\\"[[__getOverlayTheme(theme, _overlayInitialized)]]\\\">\\n        </vaadin-date-picker-overlay-content>\\n      </template>\\n    </vaadin-date-picker-overlay>\\n\\n    <iron-media-query query=\\\"[[_fullscreenMediaQuery]]\\\" query-matches=\\\"{{_fullscreen}}\\\">\\n    </iron-media-query>\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport '@polymer/iron-media-query/iron-media-query.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ThemePropertyMixin } from '@vaadin/vaadin-themable-mixin/vaadin-theme-property-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nimport './vaadin-date-picker-overlay.js';\nimport './vaadin-date-picker-overlay-content.js';\nimport { DatePickerMixin } from './vaadin-date-picker-mixin.js';\nimport '@vaadin/vaadin-text-field/src/vaadin-text-field.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\n/**\n *\n * `<vaadin-date-picker>` is a date selection field which includes a scrollable\n * month calendar view.\n * ```html\n * <vaadin-date-picker label=\"Birthday\"></vaadin-date-picker>\n * ```\n * ```js\n * datePicker.value = '2016-03-02';\n * ```\n * When the selected `value` is changed, a `value-changed` event is triggered.\n *\n *\n * ### Styling\n *\n * The following shadow DOM parts are available for styling:\n *\n * Part name | Description | Theme for Element\n * ----------------|----------------|----------------\n * `text-field` | Input element | vaadin-date-picker\n * `clear-button` | Clear button | vaadin-date-picker\n * `toggle-button` | Toggle button | vaadin-date-picker\n * `overlay-content` | The overlay element | vaadin-date-picker\n * `overlay-header` | Fullscreen mode header | vaadin-date-picker-overlay-content\n * `label` | Fullscreen mode value/label | vaadin-date-picker-overlay-content\n * `clear-button` | Fullscreen mode clear button | vaadin-date-picker-overlay-content\n * `toggle-button` | Fullscreen mode toggle button | vaadin-date-picker-overlay-content\n * `years-toggle-button` | Fullscreen mode years scroller toggle | vaadin-date-picker-overlay-content\n * `months` | Months scroller | vaadin-date-picker-overlay-content\n * `years` | Years scroller | vaadin-date-picker-overlay-content\n * `toolbar` | Footer bar with buttons | vaadin-date-picker-overlay-content\n * `today-button` | Today button | vaadin-date-picker-overlay-content\n * `cancel-button` | Cancel button | vaadin-date-picker-overlay-content\n * `month` | Month calendar | vaadin-date-picker-overlay-content\n * `year-number` | Year number | vaadin-date-picker-overlay-content\n * `year-separator` | Year separator | vaadin-date-picker-overlay-content\n * `month-header` | Month title | vaadin-month-calendar\n * `weekdays` | Weekday container | vaadin-month-calendar\n * `weekday` | Weekday element | vaadin-month-calendar\n * `week-numbers` | Week numbers container | vaadin-month-calendar\n * `week-number` | Week number element | vaadin-month-calendar\n * `date` | Date element | vaadin-month-calendar\n *\n * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * The following state attributes are available for styling:\n *\n * Attribute    | Description | Part name\n * -------------|-------------|------------\n * `invalid` | Set when the element is invalid | :host\n * `opened` | Set when the date selector overlay is opened | :host\n * `readonly` | Set when the element is readonly | :host\n * `disabled` | Set when the element is disabled | :host\n * `today` | Set on the date corresponding to the current day | date\n * `focused` | Set on the focused date | date\n * `disabled` | Set on the date out of the allowed range | date\n * `selected` | Set on the selected date | date\n *\n * If you want to replace the default input field with a custom implementation, you should use the\n * [`<vaadin-date-picker-light>`](#vaadin-date-picker-light) element.\n *\n * In addition to `<vaadin-date-picker>` itself, the following internal\n * components are themable:\n *\n * - `<vaadin-text-field>`\n * - `<vaadin-date-picker-overlay>`\n * - `<vaadin-date-picker-overlay-content>`\n * - `<vaadin-month-calendar>`\n *\n * Note: the `theme` attribute value set on `<vaadin-date-picker>` is\n * propagated to the internal themable components listed above.\n *\n * @memberof Vaadin\n * @mixes Vaadin.ElementMixin\n * @mixes Vaadin.ControlStateMixin\n * @mixes Vaadin.ThemableMixin\n * @mixes Vaadin.ThemePropertyMixin\n * @mixes Vaadin.DatePickerMixin\n * @mixes Polymer.GestureEventListeners\n * @demo demo/index.html\n */\n\nclass DatePickerElement extends ElementMixin(ControlStateMixin(ThemableMixin(ThemePropertyMixin(DatePickerMixin(GestureEventListeners(PolymerElement)))))) {\n  static get template() {\n    return html(_templateObject());\n  }\n\n  static get is() {\n    return 'vaadin-date-picker';\n  }\n\n  static get version() {\n    return '4.0.3';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Set to true to display the clear icon which clears the input.\n       */\n      clearButtonVisible: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Set to true to disable this element.\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * The error message to display when the input is invalid.\n       */\n      errorMessage: String,\n\n      /**\n       * A placeholder string in addition to the label. If this is set, the label will always float.\n       */\n      placeholder: String,\n\n      /**\n       * Set to true to make this element read-only.\n       */\n      readonly: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n\n      /**\n       * This property is set to true when the control value invalid.\n       */\n      invalid: {\n        type: Boolean,\n        reflectToAttribute: true,\n        notify: true,\n        value: false\n      },\n      _userInputValue: String\n    };\n  }\n\n  static get observers() {\n    return ['_userInputValueChanged(_userInputValue)', '_setClearButtonLabel(i18n.clear)'];\n  }\n\n  ready() {\n    super.ready(); // In order to have synchronized invalid property, we need to use the same validate logic.\n\n    afterNextRender(this, () => this._inputElement.validate = () => {}); // FIXME(platosha): dispatch `input` event on\n    // <vaadin-text-field> clear button\n    // https://github.com/vaadin/vaadin-text-field/issues/347\n\n    this._inputElement.addEventListener('change', () => {\n      if (this._inputElement.value === '') {\n        this.__dispatchChange = true;\n        this.value = '';\n        this.__dispatchChange = false;\n      }\n    });\n  }\n\n  _onVaadinOverlayClose(e) {\n    if (this._openedWithFocusRing && this.hasAttribute('focused')) {\n      this.focusElement.setAttribute('focus-ring', '');\n    } else if (!this.hasAttribute('focused')) {\n      this.focusElement.blur();\n    }\n\n    if (e.detail.sourceEvent && e.detail.sourceEvent.composedPath().indexOf(this) !== -1) {\n      e.preventDefault();\n    }\n  }\n\n  _toggle(e) {\n    e.stopPropagation();\n    this[this._overlayInitialized && this.$.overlay.opened ? 'close' : 'open']();\n  }\n\n  _input() {\n    return this.$.input;\n  }\n\n  set _inputValue(value) {\n    this._inputElement.value = value;\n  }\n\n  get _inputValue() {\n    return this._inputElement.value;\n  }\n\n  _getAriaExpanded(opened) {\n    return Boolean(opened).toString();\n  }\n  /**\n   * Focussable element used by vaadin-control-state-mixin\n   */\n\n\n  get focusElement() {\n    return this._input() || this;\n  }\n\n  _setClearButtonLabel(i18nClear) {\n    // FIXME(platosha): expose i18n API in <vaadin-text-field>\n    // https://github.com/vaadin/vaadin-text-field/issues/348\n    this._inputElement.shadowRoot.querySelector('[part=\"clear-button\"]').setAttribute('aria-label', i18nClear);\n  }\n\n}\n\ncustomElements.define(DatePickerElement.is, DatePickerElement);\nexport { DatePickerElement };","map":null,"metadata":{},"sourceType":"module"}