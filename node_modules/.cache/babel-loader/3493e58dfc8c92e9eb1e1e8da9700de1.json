{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\n\nfunction importModule(moduleId) {\n  return (\n    /** @type {?DomModule} */\n    DomModule.import(moduleId)\n  );\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent, importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n/** @typedef {{assetpath: string}} */\n\n\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\n\nexport function stylesFromModules(moduleIds) {\n  const modules = moduleIds.trim().split(/\\s+/);\n  const styles = [];\n\n  for (let i = 0; i < modules.length; i++) {\n    styles.push(...stylesFromModule(modules[i]));\n  }\n\n  return styles;\n}\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\n\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = []; // module imports: <link rel=\"import\" type=\"css\">\n\n    styles.push(..._stylesFromModuleImports(m)); // include css from the first template in the module\n\n    const template =\n    /** @type {?HTMLTemplateElement} */\n    m.querySelector('template');\n\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n      /** @type {templateWithAssetPath} */\n      m.assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\n\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = []; // if element is a template, get content from its .content\n\n    const e$ = template.content.querySelectorAll('style');\n\n    for (let i = 0; i < e$.length; i++) {\n      let e = e$[i]; // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n\n      let include = e.getAttribute(INCLUDE_ATTR);\n\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function (item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n\n      if (baseURI) {\n        e.textContent = resolveCss(e.textContent,\n        /** @type {string} */\n        baseURI);\n      }\n\n      styles.push(e);\n    }\n\n    template._styles = styles;\n  }\n\n  return template._styles;\n}\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\n\nexport function stylesFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _stylesFromModuleImports(m) : [];\n}\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\n\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n\n  for (let i = 0; i < p$.length; i++) {\n    let p = p$[i];\n\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n\n  return styles;\n}\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\n\n\nexport function cssFromModules(moduleIds) {\n  let modules = moduleIds.trim().split(/\\s+/);\n  let cssText = '';\n\n  for (let i = 0; i < modules.length; i++) {\n    cssText += cssFromModule(modules[i]);\n  }\n\n  return cssText;\n}\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\n\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m); // include css from the first template in the module\n\n\n    let t =\n    /** @type {?HTMLTemplateElement} */\n    m.querySelector('template');\n\n    if (t) {\n      cssText += cssFromTemplate(t,\n      /** @type {templateWithAssetPath} */\n      m.assetpath);\n    }\n\n    m._cssText = cssText || null;\n  }\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n\n  return m && m._cssText || '';\n}\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\n\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI); // if element is a template, get content from its .content\n\n  for (let i = 0; i < e$.length; i++) {\n    let e = e$[i];\n\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n\n    cssText += e.textContent;\n  }\n\n  return cssText;\n}\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\n\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\n\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n\n  let styles = _stylesFromModuleImports(module);\n\n  for (let i = 0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n\n  return cssText;\n}","map":null,"metadata":{},"sourceType":"module"}