{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/reidcrawford/Desktop/work/react-project/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    <style>\\n      :host {\\n        display: inline-block;\\n        position: relative;\\n        outline: none;\\n        white-space: nowrap;\\n      }\\n\\n      :host([hidden]) {\\n        display: none !important;\\n      }\\n\\n      /* Ensure the button is always aligned on the baseline */\\n      .vaadin-button-container::before {\\n        content: \\\"\\\\2003\\\";\\n        display: inline-block;\\n        width: 0;\\n      }\\n\\n      .vaadin-button-container {\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        text-align: center;\\n        width: 100%;\\n        height: 100%;\\n        min-height: inherit;\\n        text-shadow: inherit;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        user-select: none;\\n      }\\n\\n      [part=\\\"prefix\\\"],\\n      [part=\\\"suffix\\\"] {\\n        flex: none;\\n      }\\n\\n      [part=\\\"label\\\"] {\\n        white-space: nowrap;\\n        overflow: hidden;\\n        text-overflow: ellipsis;\\n      }\\n\\n      #button {\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        opacity: 0;\\n        cursor: inherit;\\n      }\\n    </style>\\n    <div class=\\\"vaadin-button-container\\\">\\n      <div part=\\\"prefix\\\">\\n        <slot name=\\\"prefix\\\"></slot>\\n      </div>\\n      <div part=\\\"label\\\">\\n        <slot></slot>\\n      </div>\\n      <div part=\\\"suffix\\\">\\n        <slot name=\\\"suffix\\\"></slot>\\n      </div>\\n    </div>\\n    <button id=\\\"button\\\" type=\\\"button\\\"></button>\\n\"], [\"\\n    <style>\\n      :host {\\n        display: inline-block;\\n        position: relative;\\n        outline: none;\\n        white-space: nowrap;\\n      }\\n\\n      :host([hidden]) {\\n        display: none !important;\\n      }\\n\\n      /* Ensure the button is always aligned on the baseline */\\n      .vaadin-button-container::before {\\n        content: \\\"\\\\\\\\2003\\\";\\n        display: inline-block;\\n        width: 0;\\n      }\\n\\n      .vaadin-button-container {\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        text-align: center;\\n        width: 100%;\\n        height: 100%;\\n        min-height: inherit;\\n        text-shadow: inherit;\\n        -webkit-user-select: none;\\n        -moz-user-select: none;\\n        user-select: none;\\n      }\\n\\n      [part=\\\"prefix\\\"],\\n      [part=\\\"suffix\\\"] {\\n        flex: none;\\n      }\\n\\n      [part=\\\"label\\\"] {\\n        white-space: nowrap;\\n        overflow: hidden;\\n        text-overflow: ellipsis;\\n      }\\n\\n      #button {\\n        position: absolute;\\n        top: 0;\\n        left: 0;\\n        width: 100%;\\n        height: 100%;\\n        opacity: 0;\\n        cursor: inherit;\\n      }\\n    </style>\\n    <div class=\\\"vaadin-button-container\\\">\\n      <div part=\\\"prefix\\\">\\n        <slot name=\\\"prefix\\\"></slot>\\n      </div>\\n      <div part=\\\"label\\\">\\n        <slot></slot>\\n      </div>\\n      <div part=\\\"suffix\\\">\\n        <slot name=\\\"suffix\\\"></slot>\\n      </div>\\n    </div>\\n    <button id=\\\"button\\\" type=\\\"button\\\"></button>\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { GestureEventListeners } from '@polymer/polymer/lib/mixins/gesture-event-listeners.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nimport { ElementMixin } from '@vaadin/vaadin-element-mixin/vaadin-element-mixin.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { addListener } from '@polymer/polymer/lib/utils/gestures.js';\n/**\n * `<vaadin-button>` is a Web Component providing an accessible and customizable button.\n *\n * ```html\n * <vaadin-button>\n * </vaadin-button>\n * ```\n *\n * ```js\n * document.querySelector('vaadin-button').addEventListener('click', () => alert('Hello World!'));\n * ```\n *\n * ### Styling\n *\n * The following shadow DOM parts are exposed for styling:\n *\n * Part name | Description\n * ----------------|----------------\n * `label` | The label (text) inside the button\n * `prefix` | A slot for e.g. an icon before the label\n * `suffix` | A slot for e.g. an icon after the label\n *\n *\n * The following attributes are exposed for styling:\n *\n * Attribute | Description\n * --------- | -----------\n * `active` | Set when the button is pressed down, either with mouse, touch or the keyboard.\n * `disabled` | Set when the button is disabled.\n * `focus-ring` | Set when the button is focused using the keyboard.\n * `focused` | Set when the button is focused.\n *\n * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)\n *\n * @memberof Vaadin\n * @mixes Vaadin.ElementMixin\n * @mixes Vaadin.ControlStateMixin\n * @mixes Vaadin.ThemableMixin\n * @mixes Polymer.GestureEventListeners\n * @demo demo/index.html\n */\n\nclass ButtonElement extends ElementMixin(ControlStateMixin(ThemableMixin(GestureEventListeners(PolymerElement)))) {\n  static get template() {\n    return html(_templateObject());\n  }\n\n  static get is() {\n    return 'vaadin-button';\n  }\n\n  static get version() {\n    return '2.2.1';\n  }\n\n  ready() {\n    super.ready(); // Leaving default role in the native button, makes navigation announcement\n    // being different when using focus navigation (tab) versus using normal\n    // navigation (arrows). The first way announces the label on a button\n    // since the focus is moved programmatically, and the second on a group.\n\n    this.setAttribute('role', 'button');\n    this.$.button.setAttribute('role', 'presentation');\n\n    this._addActiveListeners();\n  }\n  /**\n   * @protected\n   */\n\n\n  disconnectedCallback() {\n    super.disconnectedCallback(); // `active` state is preserved when the element is disconnected between keydown and keyup events.\n    // reproducible in `<vaadin-date-picker>` when closing on `Cancel` or `Today` click.\n\n    if (this.hasAttribute('active')) {\n      this.removeAttribute('active');\n    }\n  }\n\n  _addActiveListeners() {\n    addListener(this, 'down', () => !this.disabled && this.setAttribute('active', ''));\n    addListener(this, 'up', () => this.removeAttribute('active'));\n    this.addEventListener('keydown', e => !this.disabled && [13, 32].indexOf(e.keyCode) >= 0 && this.setAttribute('active', ''));\n    this.addEventListener('keyup', () => this.removeAttribute('active'));\n    this.addEventListener('blur', () => this.removeAttribute('active'));\n  }\n  /**\n   * @protected\n   */\n\n\n  get focusElement() {\n    return this.$.button;\n  }\n\n}\n\ncustomElements.define(ButtonElement.is, ButtonElement);\nexport { ButtonElement };","map":null,"metadata":{},"sourceType":"module"}