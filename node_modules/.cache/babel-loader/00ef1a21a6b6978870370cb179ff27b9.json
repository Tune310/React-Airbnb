{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n/**\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @implements {Polymer_OptionalMutableData}\n * @implements {Polymer_GestureEventListeners}\n * @private\n */\n\nconst domBindBase = GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));\n/**\n * Custom element to allow using Polymer's template features (data binding,\n * declarative event listeners, etc.) in the main document without defining\n * a new custom element.\n *\n * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n * element, which will immediately stamp the wrapped template into the main\n * document and bind elements to the `dom-bind` element itself as the\n * binding scope.\n *\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @appliesMixin OptionalMutableData\n * @appliesMixin GestureEventListeners\n * @extends {domBindBase}\n * @summary Custom element to allow using Polymer's template features (data\n *   binding, declarative event listeners, etc.) in the main document.\n */\n\nexport class DomBind extends domBindBase {\n  static get observedAttributes() {\n    return ['mutable-data'];\n  }\n\n  constructor() {\n    super();\n\n    if (strictTemplatePolicy) {\n      throw new Error(\"strictTemplatePolicy: dom-bind not allowed\");\n    }\n\n    this.root = null;\n    this.$ = null;\n    this.__children = null;\n  }\n  /* eslint-disable no-unused-vars */\n\n  /**\n   * @override\n   * @param {string} name Name of attribute that changed\n   * @param {?string} old Old attribute value\n   * @param {?string} value New attribute value\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n\n\n  attributeChangedCallback(name, old, value, namespace) {\n    // assumes only one observed attribute\n    this.mutableData = true;\n  }\n  /**\n   * @override\n   * @return {void}\n   */\n\n\n  connectedCallback() {\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n\n    this.render();\n  }\n  /**\n   * @override\n   * @return {void}\n   */\n\n\n  disconnectedCallback() {\n    this.__removeChildren();\n  }\n\n  __insertChildren() {\n    wrap(wrap(this).parentNode).insertBefore(this.root, this);\n  }\n\n  __removeChildren() {\n    if (this.__children) {\n      for (let i = 0; i < this.__children.length; i++) {\n        this.root.appendChild(this.__children[i]);\n      }\n    }\n  }\n  /**\n   * Forces the element to render its content. This is typically only\n   * necessary to call if HTMLImports with the async attribute are used.\n   * @return {void}\n   */\n\n\n  render() {\n    let template;\n\n    if (!this.__children) {\n      template =\n      /** @type {HTMLTemplateElement} */\n      template || this.querySelector('template');\n\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          template =\n          /** @type {HTMLTemplateElement} */\n          this.querySelector('template');\n\n          if (template) {\n            observer.disconnect();\n            this.render();\n          } else {\n            throw new Error('dom-bind requires a <template> child');\n          }\n        });\n        observer.observe(this, {\n          childList: true\n        });\n        return;\n      }\n\n      this.root = this._stampTemplate(\n      /** @type {!HTMLTemplateElement} */\n      template);\n      this.$ = this.root.$;\n      this.__children = [];\n\n      for (let n = this.root.firstChild; n; n = n.nextSibling) {\n        this.__children[this.__children.length] = n;\n      }\n\n      this._enableProperties();\n    }\n\n    this.__insertChildren();\n\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n}\ncustomElements.define('dom-bind', DomBind);","map":null,"metadata":{},"sourceType":"module"}