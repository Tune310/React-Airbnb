{"ast":null,"code":"/**\n * @fileoverview\n * @suppress {checkPrototypalTypes}\n * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt The complete set of authors may be found\n * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may\n * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by\n * Google as part of the polymer project is also subject to an additional IP\n * rights grant found at http://polymer.github.io/PATENTS.txt\n */\nimport { ElementMixin } from './element-mixin.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nconst DISABLED_ATTR = 'disable-upgrade';\n/**\n * Element class mixin that allows the element to boot up in a non-enabled\n * state when the `disable-upgrade` attribute is present. This mixin is\n * designed to be used with element classes like PolymerElement that perform\n * initial startup work when they are first connected. When the\n * `disable-upgrade` attribute is removed, if the element is connected, it\n * boots up and \"enables\" as it otherwise would; if it is not connected, the\n * element boots up when it is next connected.\n *\n * Using `disable-upgrade` with PolymerElement prevents any data propagation\n * to the element, any element DOM from stamping, or any work done in\n * connected/disconnctedCallback from occuring, but it does not prevent work\n * done in the element constructor.\n *\n * Note, this mixin must be applied on top of any element class that\n * itself implements a `connectedCallback` so that it can control the work\n * done in `connectedCallback`. For example,\n *\n *     MyClass = DisableUpgradeMixin(class extends BaseClass {...});\n *\n * @mixinFunction\n * @polymer\n * @appliesMixin ElementMixin\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\n\nexport const DisableUpgradeMixin = dedupingMixin(base => {\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @extends {HTMLElement}\n   * @private\n   */\n  const superClass = ElementMixin(base);\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_DisableUpgradeMixin}\n   */\n\n  class DisableUpgradeClass extends superClass {\n    /**\n     * @suppress {missingProperties} go/missingfnprops\n     */\n    static get observedAttributes() {\n      return super.observedAttributes.concat(DISABLED_ATTR);\n    }\n    /**\n     * @override\n     * @param {string} name Attribute name.\n     * @param {?string} old The previous value for the attribute.\n     * @param {?string} value The new value for the attribute.\n     * @param {?string} namespace The XML namespace for the attribute.\n     * @return {void}\n     */\n\n\n    attributeChangedCallback(name, old, value, namespace) {\n      if (name == DISABLED_ATTR) {\n        if (!this.__dataEnabled && value == null && this.isConnected) {\n          super.connectedCallback();\n        }\n      } else {\n        super.attributeChangedCallback(name, old, value,\n        /** @type {null|string} */\n        namespace);\n      }\n    }\n    /*\n      NOTE: cannot gate on attribute because this is called before\n      attributes are delivered. Therefore, we stub this out and\n      call `super._initializeProperties()` manually.\n    */\n\n    /** @override */\n\n\n    _initializeProperties() {} // prevent user code in connected from running\n\n    /** @override */\n\n\n    connectedCallback() {\n      if (this.__dataEnabled || !this.hasAttribute(DISABLED_ATTR)) {\n        super.connectedCallback();\n      }\n    } // prevent element from turning on properties\n\n    /** @override */\n\n\n    _enableProperties() {\n      if (!this.hasAttribute(DISABLED_ATTR)) {\n        if (!this.__dataEnabled) {\n          super._initializeProperties();\n        }\n\n        super._enableProperties();\n      }\n    } // only go if \"enabled\"\n\n    /** @override */\n\n\n    disconnectedCallback() {\n      if (this.__dataEnabled) {\n        super.disconnectedCallback();\n      }\n    }\n\n  }\n\n  return DisableUpgradeClass;\n});","map":null,"metadata":{},"sourceType":"module"}