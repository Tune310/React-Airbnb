{"ast":null,"code":"import { idlePeriod } from '@polymer/polymer/lib/utils/async.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { enqueueDebouncer } from '@polymer/polymer/lib/utils/flush.js';\nimport { usageStatistics } from '@vaadin/vaadin-usage-statistics/vaadin-usage-statistics.js';\n\nif (!window.Vaadin) {\n  window['Vaadin'] = {};\n}\n/**\n * Array of Vaadin custom element classes that have been finalized.\n */\n\n\nwindow['Vaadin'].registrations = window.Vaadin.registrations || []; // Use the hack to prevent polymer-modulizer from converting to exports\n\nwindow['Vaadin'].developmentModeCallback = window.Vaadin.developmentModeCallback || {};\n\nwindow['Vaadin'].developmentModeCallback['vaadin-usage-statistics'] = function () {\n  if (usageStatistics) {\n    usageStatistics();\n  }\n};\n\nlet statsJob;\n/**\n * @polymerMixin\n */\n\nexport const ElementMixin = superClass => class VaadinElementMixin extends superClass {\n  /** @protected */\n  static _finalizeClass() {\n    super._finalizeClass(); // Registers a class prototype for telemetry purposes.\n\n\n    if (this.is) {\n      window.Vaadin.registrations.push(this);\n\n      if (window.Vaadin.developmentModeCallback) {\n        statsJob = Debouncer.debounce(statsJob, idlePeriod, () => {\n          window.Vaadin.developmentModeCallback['vaadin-usage-statistics']();\n        });\n        enqueueDebouncer(statsJob);\n      }\n    }\n  }\n\n  ready() {\n    super.ready();\n\n    if (document.doctype === null) {\n      console.warn('Vaadin components require the \"standards mode\" declaration. Please add <!DOCTYPE html> to the HTML document.');\n    }\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}