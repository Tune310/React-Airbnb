{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ControlStateMixin } from '@vaadin/vaadin-control-state-mixin/vaadin-control-state-mixin.js';\nimport { timeOut } from '@polymer/polymer/lib/utils/async.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nconst $_documentContainer = document.createElement('template');\n$_documentContainer.innerHTML = \"<dom-module id=\\\"vaadin-text-field-shared-styles\\\">\\n  <template>\\n    <style>\\n      :host {\\n        display: inline-flex;\\n        outline: none;\\n      }\\n\\n      :host::before {\\n        content: \\\"\\\\2003\\\";\\n        width: 0;\\n        display: inline-block;\\n        /* Size and position this element on the same vertical position as the input-field element\\n           to make vertical align for the host element work as expected */\\n      }\\n\\n      :host([hidden]) {\\n        display: none !important;\\n      }\\n\\n      .vaadin-text-field-container,\\n      .vaadin-text-area-container {\\n        display: flex;\\n        flex-direction: column;\\n        min-width: 100%;\\n        max-width: 100%;\\n        width: var(--vaadin-text-field-default-width, 12em);\\n      }\\n\\n      [part=\\\"label\\\"]:empty {\\n        display: none;\\n      }\\n\\n      [part=\\\"input-field\\\"] {\\n        display: flex;\\n        align-items: center;\\n        flex: auto;\\n      }\\n\\n      .vaadin-text-field-container [part=\\\"input-field\\\"] {\\n        flex-grow: 0;\\n        background-color: white !important;\\n      }\\n\\n      /* Reset the native input styles */\\n      [part=\\\"value\\\"],\\n      [part=\\\"input-field\\\"] ::slotted(input),\\n      [part=\\\"input-field\\\"] ::slotted(textarea) {\\n        -webkit-appearance: none;\\n        -moz-appearance: none;\\n        outline: none;\\n        margin: 0;\\n        padding: 0;\\n        border: 0;\\n        border-radius: 0;\\n        min-width: 0;\\n        font: inherit;\\n        font-size: 1em;\\n        line-height: normal;\\n        color: inherit;\\n        background-color: transparent;\\n        /* Disable default invalid style in Firefox */\\n        box-shadow: none;\\n      }\\n\\n      [part=\\\"input-field\\\"] ::slotted(*) {\\n        flex: none;\\n      }\\n\\n      [part=\\\"value\\\"],\\n      [part=\\\"input-field\\\"] ::slotted(input),\\n      [part=\\\"input-field\\\"] ::slotted(textarea),\\n      /* Slotted by vaadin-select-text-field */\\n      [part=\\\"input-field\\\"] ::slotted([part=\\\"value\\\"]) {\\n        flex: auto;\\n        white-space: nowrap;\\n        overflow: hidden;\\n        width: 100%;\\n        height: 100%;\\n      }\\n\\n      [part=\\\"input-field\\\"] ::slotted(textarea) {\\n        resize: none;\\n      }\\n\\n      [part=\\\"value\\\"]::-ms-clear,\\n      [part=\\\"input-field\\\"] ::slotted(input)::-ms-clear {\\n        display: none;\\n      }\\n\\n      [part=\\\"clear-button\\\"] {\\n        cursor: default;\\n      }\\n\\n      [part=\\\"clear-button\\\"]::before {\\n        content: \\\"\\u2715\\\";\\n      }\\n    </style>\\n  </template>\\n</dom-module>\";\ndocument.head.appendChild($_documentContainer.content);\nconst HOST_PROPS = {\n  default: ['list', 'autofocus', 'pattern', 'autocapitalize', 'autocorrect', 'maxlength', 'minlength', 'name', 'placeholder', 'autocomplete', 'title'],\n  accessible: ['disabled', 'readonly', 'required', 'invalid']\n};\nconst PROP_TYPE = {\n  DEFAULT: 'default',\n  ACCESSIBLE: 'accessible'\n};\n/**\n * @polymerMixin\n * @mixes Vaadin.ControlStateMixin\n */\n\nexport const TextFieldMixin = subclass => class VaadinTextFieldMixin extends ControlStateMixin(subclass) {\n  static get properties() {\n    return {\n      /**\n       * Whether the value of the control can be automatically completed by the browser.\n       * List of available options at:\n       * https://developer.mozilla.org/en/docs/Web/HTML/Element/input#attr-autocomplete\n       */\n      autocomplete: {\n        type: String\n      },\n\n      /**\n       * This is a property supported by Safari that is used to control whether\n       * autocorrection should be enabled when the user is entering/editing the text.\n       * Possible values are:\n       * on: Enable autocorrection.\n       * off: Disable autocorrection.\n       */\n      autocorrect: {\n        type: String\n      },\n\n      /**\n       * This is a property supported by Safari and Chrome that is used to control whether\n       * autocapitalization should be enabled when the user is entering/editing the text.\n       * Possible values are:\n       * characters: Characters capitalization.\n       * words: Words capitalization.\n       * sentences: Sentences capitalization.\n       * none: No capitalization.\n       */\n      autocapitalize: {\n        type: String\n      },\n\n      /**\n       * Specify that the value should be automatically selected when the field gains focus.\n       */\n      autoselect: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Set to true to display the clear icon which clears the input.\n       */\n      clearButtonVisible: {\n        type: Boolean,\n        value: false\n      },\n\n      /**\n       * Error to show when the input value is invalid.\n       */\n      errorMessage: {\n        type: String,\n        value: ''\n      },\n\n      /**\n       * Object with translated strings used for localization. Has\n       * the following structure and default values:\n       *\n       * ```\n       * {\n       *   // Translation of the clear icon button accessible label\n       *   clear: 'Clear'\n       * }\n       * ```\n       */\n      i18n: {\n        type: Object,\n        value: () => {\n          return {\n            clear: 'Clear'\n          };\n        }\n      },\n\n      /**\n       * String used for the label element.\n       */\n      label: {\n        type: String,\n        value: '',\n        observer: '_labelChanged'\n      },\n\n      /**\n       * Maximum number of characters (in Unicode code points) that the user can enter.\n       */\n      maxlength: {\n        type: Number\n      },\n\n      /**\n       * Minimum number of characters (in Unicode code points) that the user can enter.\n       */\n      minlength: {\n        type: Number\n      },\n\n      /**\n       * The name of the control, which is submitted with the form data.\n       */\n      name: {\n        type: String\n      },\n\n      /**\n       * A hint to the user of what can be entered in the control.\n       */\n      placeholder: {\n        type: String\n      },\n\n      /**\n       * This attribute indicates that the user cannot modify the value of the control.\n       */\n      readonly: {\n        type: Boolean,\n        reflectToAttribute: true\n      },\n\n      /**\n       * Specifies that the user must fill in a value.\n       */\n      required: {\n        type: Boolean,\n        reflectToAttribute: true\n      },\n\n      /**\n       * The initial value of the control.\n       * It can be used for two-way data binding.\n       */\n      value: {\n        type: String,\n        value: '',\n        observer: '_valueChanged',\n        notify: true\n      },\n\n      /**\n       * This property is set to true when the control value is invalid.\n       */\n      invalid: {\n        type: Boolean,\n        reflectToAttribute: true,\n        notify: true,\n        value: false\n      },\n\n      /**\n       * Specifies that the text field has value.\n       */\n      hasValue: {\n        type: Boolean,\n        reflectToAttribute: true\n      },\n\n      /**\n       * When set to true, user is prevented from typing a value that\n       * conflicts with the given `pattern`.\n       */\n      preventInvalidInput: {\n        type: Boolean\n      },\n      _labelId: String,\n      _errorId: String,\n      _inputId: String\n    };\n  }\n\n  static get observers() {\n    return ['_stateChanged(disabled, readonly, clearButtonVisible, hasValue)', '_hostPropsChanged(' + HOST_PROPS.default.join(', ') + ')', '_hostAccessiblePropsChanged(' + HOST_PROPS.accessible.join(', ') + ')', '_getActiveErrorId(invalid, errorMessage, _errorId)', '_getActiveLabelId(label, _labelId, _inputId)', '__observeOffsetHeight(errorMessage, invalid, label)'];\n  }\n\n  get focusElement() {\n    if (!this.shadowRoot) {\n      return;\n    }\n\n    const slotted = this.querySelector(\"\".concat(this._slottedTagName, \"[slot=\\\"\").concat(this._slottedTagName, \"\\\"]\"));\n\n    if (slotted) {\n      return slotted;\n    }\n\n    return this.shadowRoot.querySelector('[part=\"value\"]');\n  }\n  /**\n   * @private\n   */\n\n\n  get inputElement() {\n    return this.focusElement;\n  }\n\n  get _slottedTagName() {\n    return 'input';\n  }\n\n  _createConstraintsObserver() {\n    // This complex observer needs to be added dynamically here (instead of defining it above in the `get observers()`)\n    // so that it runs after complex observers of inheriting classes. Otherwise e.g. `_stepOrMinChanged()` observer of\n    // vaadin-number-field would run after this and the `min` and `step` properties would not yet be propagated to\n    // the `inputElement` when this runs.\n    this._createMethodObserver('_constraintsChanged(required, minlength, maxlength, pattern)');\n  }\n\n  _onInput(e) {\n    if (this.__preventInput) {\n      e.stopImmediatePropagation();\n      this.__preventInput = false;\n      return;\n    }\n\n    if (this.preventInvalidInput) {\n      const input = this.inputElement;\n\n      if (input.value.length > 0 && !this.checkValidity()) {\n        input.value = this.value || ''; // add input-prevented attribute for 200ms\n\n        this.setAttribute('input-prevented', '');\n        this._inputDebouncer = Debouncer.debounce(this._inputDebouncer, timeOut.after(200), () => {\n          this.removeAttribute('input-prevented');\n        });\n        return;\n      }\n    }\n\n    if (!e.__fromClearButton) {\n      this.__userInput = true;\n    }\n\n    this.value = e.target.value;\n  } // NOTE(yuriy): Workaround needed for IE11 and Edge for proper displaying\n  // of the clear button instead of setting display property for it depending on state.\n\n\n  _stateChanged(disabled, readonly, clearButtonVisible, hasValue) {\n    if (!disabled && !readonly && clearButtonVisible && hasValue) {\n      this.$.clearButton.removeAttribute('hidden');\n    } else {\n      this.$.clearButton.setAttribute('hidden', true);\n    }\n  }\n\n  _onChange(e) {\n    if (this._valueClearing) {\n      return;\n    } // In the Shadow DOM, the `change` event is not leaked into the\n    // ancestor tree, so we must do this manually.\n\n\n    const changeEvent = new CustomEvent('change', {\n      detail: {\n        sourceEvent: e\n      },\n      bubbles: e.bubbles,\n      cancelable: e.cancelable\n    });\n    this.dispatchEvent(changeEvent);\n  }\n\n  _valueChanged(newVal, oldVal) {\n    // setting initial value to empty string, skip validation\n    if (newVal === '' && oldVal === undefined) {\n      return;\n    }\n\n    if (newVal !== '' && newVal != null) {\n      this.hasValue = true;\n    } else {\n      this.hasValue = false;\n    }\n\n    if (this.__userInput) {\n      this.__userInput = false;\n      return;\n    } else if (newVal !== undefined) {\n      this.inputElement.value = newVal;\n    } else {\n      this.value = this.inputElement.value = '';\n    }\n\n    if (this.invalid) {\n      this.validate();\n    }\n  }\n\n  _labelChanged(label) {\n    if (label !== '' && label != null) {\n      this.setAttribute('has-label', '');\n    } else {\n      this.removeAttribute('has-label');\n    }\n  }\n\n  _onSlotChange() {\n    const slotted = this.querySelector(\"\".concat(this._slottedTagName, \"[slot=\\\"\").concat(this._slottedTagName, \"\\\"]\"));\n\n    if (this.value) {\n      this.inputElement.value = this.value;\n      this.validate();\n    }\n\n    if (slotted && !this._slottedInput) {\n      this._validateSlottedValue(slotted);\n\n      this._addInputListeners(slotted);\n\n      this._addIEListeners(slotted);\n\n      this._slottedInput = slotted;\n    } else if (!slotted && this._slottedInput) {\n      this._removeInputListeners(this._slottedInput);\n\n      this._removeIEListeners(this._slottedInput);\n\n      this._slottedInput = undefined;\n    }\n\n    Object.keys(PROP_TYPE).map(key => PROP_TYPE[key]).forEach(type => this._propagateHostAttributes(HOST_PROPS[type].map(attr => this[attr]), type));\n  }\n\n  _hostPropsChanged(...attributesValues) {\n    this._propagateHostAttributes(attributesValues, PROP_TYPE.DEFAULT);\n  }\n\n  _hostAccessiblePropsChanged(...attributesValues) {\n    this._propagateHostAttributes(attributesValues, PROP_TYPE.ACCESSIBLE);\n  }\n\n  _validateSlottedValue(slotted) {\n    if (slotted.value !== this.value) {\n      console.warn('Please define value on the vaadin-text-field component!');\n      slotted.value = '';\n    }\n  }\n\n  _propagateHostAttributes(attributesValues, type) {\n    const input = this.inputElement;\n    const attributeNames = HOST_PROPS[type];\n\n    if (type === 'accessible') {\n      attributeNames.forEach((attr, index) => {\n        this._setOrToggleAttribute(attr, attributesValues[index], input);\n\n        this._setOrToggleAttribute(\"aria-\".concat(attr), attributesValues[index], input);\n      });\n    } else {\n      attributeNames.forEach((attr, index) => {\n        this._setOrToggleAttribute(attr, attributesValues[index], input);\n      });\n    }\n  }\n\n  _setOrToggleAttribute(name, value, node) {\n    if (!name || !node) {\n      return;\n    }\n\n    if (value) {\n      node.setAttribute(name, typeof value === 'boolean' ? '' : value);\n    } else {\n      node.removeAttribute(name);\n    }\n  }\n\n  _constraintsChanged(required, minlength, maxlength, pattern) {\n    if (!this.invalid) {\n      return;\n    }\n\n    if (!required && !minlength && !maxlength && !pattern) {\n      this.invalid = false;\n    } else {\n      this.validate();\n    }\n  }\n  /**\n   * Returns true if the current input value satisfies all constraints (if any)\n   * @returns {boolean}\n   */\n\n\n  checkValidity() {\n    if (this.required || this.pattern || this.maxlength || this.minlength) {\n      return this.inputElement.checkValidity();\n    } else {\n      return !this.invalid;\n    }\n  }\n\n  _addInputListeners(node) {\n    node.addEventListener('input', this._boundOnInput);\n    node.addEventListener('change', this._boundOnChange);\n    node.addEventListener('blur', this._boundOnBlur);\n    node.addEventListener('focus', this._boundOnFocus);\n  }\n\n  _removeInputListeners(node) {\n    node.removeEventListener('input', this._boundOnInput);\n    node.removeEventListener('change', this._boundOnChange);\n    node.removeEventListener('blur', this._boundOnBlur);\n    node.removeEventListener('focus', this._boundOnFocus);\n  }\n\n  ready() {\n    super.ready();\n\n    this._createConstraintsObserver();\n\n    this._boundOnInput = this._onInput.bind(this);\n    this._boundOnChange = this._onChange.bind(this);\n    this._boundOnBlur = this._onBlur.bind(this);\n    this._boundOnFocus = this._onFocus.bind(this);\n    const defaultInput = this.shadowRoot.querySelector('[part=\"value\"]');\n    this._slottedInput = this.querySelector(\"\".concat(this._slottedTagName, \"[slot=\\\"\").concat(this._slottedTagName, \"\\\"]\"));\n\n    this._addInputListeners(defaultInput);\n\n    this._addIEListeners(defaultInput);\n\n    if (this._slottedInput) {\n      this._addIEListeners(this._slottedInput);\n\n      this._addInputListeners(this._slottedInput);\n    }\n\n    this.shadowRoot.querySelector('[name=\"input\"], [name=\"textarea\"]').addEventListener('slotchange', this._onSlotChange.bind(this));\n\n    if (!(window.ShadyCSS && window.ShadyCSS.nativeCss)) {\n      this.updateStyles();\n    }\n\n    this.$.clearButton.addEventListener('mousedown', () => this._valueClearing = true);\n    this.$.clearButton.addEventListener('mouseleave', () => this._valueClearing = false);\n    this.$.clearButton.addEventListener('click', this._onClearButtonClick.bind(this));\n    this.addEventListener('keydown', this._onKeyDown.bind(this));\n    var uniqueId = TextFieldMixin._uniqueId = 1 + TextFieldMixin._uniqueId || 0;\n    this._errorId = \"\".concat(this.constructor.is, \"-error-\").concat(uniqueId);\n    this._labelId = \"\".concat(this.constructor.is, \"-label-\").concat(uniqueId);\n    this._inputId = \"\".concat(this.constructor.is, \"-input-\").concat(uniqueId); // Lumo theme defines a max-height transition for the \"error-message\"\n    // part on invalid state change.\n\n    this.shadowRoot.querySelector('[part=\"error-message\"]').addEventListener('transitionend', () => {\n      this.__observeOffsetHeight();\n    });\n  }\n  /**\n   * Returns true if `value` is valid.\n   * `<iron-form>` uses this to check the validity for all its elements.\n   *\n   * @return {boolean} True if the value is valid.\n   */\n\n\n  validate() {\n    return !(this.invalid = !this.checkValidity());\n  }\n\n  clear() {\n    this.value = '';\n  }\n\n  _onBlur() {\n    this.validate();\n  }\n\n  _onFocus() {\n    if (this.autoselect) {\n      this.inputElement.select(); // iOS 9 workaround: https://stackoverflow.com/a/7436574\n\n      setTimeout(() => {\n        try {\n          this.inputElement.setSelectionRange(0, 9999);\n        } catch (e) {// The workaround may cause errors on different input types.\n          // Needs to be suppressed. See https://github.com/vaadin/flow/issues/6070\n        }\n      });\n    }\n  }\n\n  _onClearButtonClick(e) {\n    e.preventDefault(); // NOTE(yuriy): This line won't affect focus on the host. Cannot be properly tested.\n\n    this.inputElement.focus();\n    this.clear();\n    this._valueClearing = false;\n\n    if (navigator.userAgent.match(/Trident/)) {\n      // Disable IE input\" event prevention here, we want the input event from\n      // below to propagate normally.\n      this.__preventInput = false;\n    }\n\n    const inputEvent = new Event('input', {\n      bubbles: true,\n      composed: true\n    });\n    inputEvent.__fromClearButton = true;\n    const changeEvent = new Event('change', {\n      bubbles: !this._slottedInput\n    });\n    changeEvent.__fromClearButton = true;\n    this.inputElement.dispatchEvent(inputEvent);\n    this.inputElement.dispatchEvent(changeEvent);\n  }\n\n  _onKeyDown(e) {\n    if (e.keyCode === 27 && this.clearButtonVisible) {\n      const dispatchChange = !!this.value;\n      this.clear();\n      dispatchChange && this.inputElement.dispatchEvent(new Event('change', {\n        bubbles: !this._slottedInput\n      }));\n    }\n  }\n\n  _addIEListeners(node) {\n    /* istanbul ignore if */\n    if (navigator.userAgent.match(/Trident/)) {\n      // IE11 dispatches `input` event in following cases:\n      // - focus or blur, when placeholder attribute is set\n      // - placeholder attribute value changed\n      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/101220/\n      this._shouldPreventInput = () => {\n        this.__preventInput = true;\n        requestAnimationFrame(() => {\n          this.__preventInput = false;\n        });\n      };\n\n      node.addEventListener('focusin', this._shouldPreventInput);\n      node.addEventListener('focusout', this._shouldPreventInput);\n\n      this._createPropertyObserver('placeholder', this._shouldPreventInput);\n    }\n  }\n\n  _removeIEListeners(node) {\n    /* istanbul ignore if */\n    if (navigator.userAgent.match(/Trident/)) {\n      node.removeEventListener('focusin', this._shouldPreventInput);\n      node.removeEventListener('focusout', this._shouldPreventInput);\n    }\n  }\n\n  _getActiveErrorId(invalid, errorMessage, errorId) {\n    this._setOrToggleAttribute('aria-describedby', errorMessage && invalid ? errorId : undefined, this.focusElement);\n  }\n\n  _getActiveLabelId(label, _labelId, _inputId) {\n    let ids = _inputId;\n\n    if (label) {\n      ids = \"\".concat(_labelId, \" \").concat(_inputId);\n    }\n\n    this.focusElement.setAttribute('aria-labelledby', ids);\n  }\n\n  _getErrorMessageAriaHidden(invalid, errorMessage, errorId) {\n    return (!(errorMessage && invalid ? errorId : undefined)).toString();\n  }\n\n  _dispatchIronResizeEventIfNeeded(sizePropertyName, value) {\n    const previousSizePropertyName = '__previous' + sizePropertyName;\n\n    if (this[previousSizePropertyName] !== undefined && this[previousSizePropertyName] !== value) {\n      this.dispatchEvent(new CustomEvent('iron-resize', {\n        bubbles: true\n      }));\n    }\n\n    this[previousSizePropertyName] = value;\n  }\n\n  __observeOffsetHeight() {\n    this._dispatchIronResizeEventIfNeeded('Height', this.offsetHeight);\n  }\n  /**\n   * @protected\n   */\n\n\n  attributeChangedCallback(prop, oldVal, newVal) {\n    super.attributeChangedCallback(prop, oldVal, newVal); // Needed until Edge has CSS Custom Properties (present in Edge Preview)\n\n    /* istanbul ignore if */\n\n    if (!(window.ShadyCSS && window.ShadyCSS.nativeCss) && /^(focused|focus-ring|invalid|disabled|placeholder|has-value)$/.test(prop)) {\n      this.updateStyles();\n    } // Safari has an issue with repainting shadow root element styles when a host attribute changes.\n    // Need this workaround (toggle any inline css property on and off) until the issue gets fixed.\n\n\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    /* istanbul ignore if */\n\n    if (isSafari && this.root) {\n      const WEBKIT_PROPERTY = '-webkit-backface-visibility';\n      this.root.querySelectorAll('*').forEach(el => {\n        el.style[WEBKIT_PROPERTY] = 'visible';\n        el.style[WEBKIT_PROPERTY] = '';\n      });\n    }\n  }\n  /**\n   * Fired when the user commits a value change.\n   *\n   * @event change\n   */\n\n  /**\n   * Fired when the value is changed by the user: on every typing keystroke,\n   * and the value is cleared using the clear button.\n   *\n   * @event input\n   */\n\n  /**\n   * Fired when the size of the element changes.\n   *\n   * @event iron-resize\n   */\n\n\n};","map":null,"metadata":{},"sourceType":"module"}