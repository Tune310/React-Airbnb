{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/reidcrawford/Desktop/work/react-project/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n    <style>\\n      :host {\\n        display: block;\\n        overflow: hidden;\\n        height: 500px;\\n      }\\n\\n      #scroller {\\n        position: relative;\\n        height: 100%;\\n        overflow: auto;\\n        outline: none;\\n        margin-right: -40px;\\n        -webkit-overflow-scrolling: touch;\\n        -ms-overflow-style: none;\\n        overflow-x: hidden;\\n      }\\n\\n      #scroller.notouchscroll {\\n        -webkit-overflow-scrolling: auto;\\n      }\\n\\n      #scroller::-webkit-scrollbar {\\n        display: none;\\n      }\\n\\n      .buffer {\\n        position: absolute;\\n        width: var(--vaadin-infinite-scroller-buffer-width, 100%);\\n        box-sizing: border-box;\\n        padding-right: 40px;\\n        top: var(--vaadin-infinite-scroller-buffer-offset, 0);\\n        animation: fadein 0.2s;\\n      }\\n\\n      @keyframes fadein {\\n        from { opacity: 0; }\\n        to { opacity: 1; }\\n      }\\n    </style>\\n\\n    <div id=\\\"scroller\\\" on-scroll=\\\"_scroll\\\">\\n      <div class=\\\"buffer\\\"></div>\\n      <div class=\\\"buffer\\\"></div>\\n      <div id=\\\"fullHeight\\\"></div>\\n    </div>\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\n/**\n@license\nCopyright (c) 2017 Vaadin Ltd.\nThis program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n*/\nimport { PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { timeOut } from '@polymer/polymer/lib/utils/async.js';\nimport { Debouncer } from '@polymer/polymer/lib/utils/debounce.js';\nimport { flush } from '@polymer/polymer/lib/utils/flush.js';\nimport { templatize } from '@polymer/polymer/lib/utils/templatize.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\nimport { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\n/**\n * @memberof Vaadin\n * @private\n */\n\nclass InfiniteScrollerElement extends PolymerElement {\n  static get template() {\n    return html(_templateObject());\n  }\n\n  static get is() {\n    return 'vaadin-infinite-scroller';\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Count of individual items in each buffer.\n       * The scroller has 2 buffers altogether so bufferSize of 20\n       * will result in 40 buffered DOM items in total.\n       * Changing after initialization not supported.\n       */\n      bufferSize: {\n        type: Number,\n        value: 20\n      },\n\n      /**\n       * The amount of initial scroll top. Needed in order for the\n       * user to be able to scroll backwards.\n       */\n      _initialScroll: {\n        value: 500000\n      },\n\n      /**\n       * The index/position mapped at _initialScroll point.\n       */\n      _initialIndex: {\n        value: 0\n      },\n      _buffers: Array,\n      _preventScrollEvent: Boolean,\n      _mayHaveMomentum: Boolean,\n      _initialized: Boolean,\n      active: {\n        type: Boolean,\n        observer: '_activated'\n      }\n    };\n  }\n\n  ready() {\n    super.ready();\n    this._buffers = Array.prototype.slice.call(this.root.querySelectorAll('.buffer'));\n    this.$.fullHeight.style.height = this._initialScroll * 2 + 'px';\n    var tpl = this.querySelector('template');\n    this._TemplateClass = templatize(tpl, this, {\n      forwardHostProp: function (prop, value) {\n        if (prop !== 'index') {\n          this._buffers.forEach(buffer => {\n            [].forEach.call(buffer.children, insertionPoint => {\n              insertionPoint._itemWrapper.instance[prop] = value;\n            });\n          });\n        }\n      }\n    }); // Firefox interprets elements with overflow:auto as focusable\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1069739\n\n    var isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n\n    if (isFirefox) {\n      this.$.scroller.tabIndex = -1;\n    }\n  }\n\n  _activated(active) {\n    if (active && !this._initialized) {\n      this._createPool();\n\n      this._initialized = true;\n    }\n  }\n\n  _finishInit() {\n    if (!this._initDone) {\n      // Once the first set of items start fading in, stamp the rest\n      this._buffers.forEach(buffer => {\n        [].forEach.call(buffer.children, insertionPoint => this._ensureStampedInstance(insertionPoint._itemWrapper));\n      }, this);\n\n      if (!this._buffers[0].translateY) {\n        this._reset();\n      }\n\n      this._initDone = true;\n    }\n  }\n\n  _translateBuffer(up) {\n    var index = up ? 1 : 0;\n    this._buffers[index].translateY = this._buffers[index ? 0 : 1].translateY + this._bufferHeight * (index ? -1 : 1);\n    this._buffers[index].style.transform = 'translate3d(0, ' + this._buffers[index].translateY + 'px, 0)';\n    this._buffers[index].updated = false;\n\n    this._buffers.reverse();\n  }\n\n  _scroll() {\n    if (this._scrollDisabled) {\n      return;\n    }\n\n    var scrollTop = this.$.scroller.scrollTop;\n\n    if (scrollTop < this._bufferHeight || scrollTop > this._initialScroll * 2 - this._bufferHeight) {\n      // Scrolled near the end/beginning of the scrollable area -> reset.\n      this._initialIndex = ~~this.position;\n\n      this._reset();\n    } // Check if we scrolled enough to translate the buffer positions.\n\n\n    var bufferOffset = this.root.querySelector('.buffer').offsetTop;\n    var upperThresholdReached = scrollTop > this._buffers[1].translateY + this.itemHeight + bufferOffset;\n    var lowerThresholdReached = scrollTop < this._buffers[0].translateY + this.itemHeight + bufferOffset;\n\n    if (upperThresholdReached || lowerThresholdReached) {\n      this._translateBuffer(lowerThresholdReached);\n\n      this._updateClones();\n    }\n\n    if (!this._preventScrollEvent) {\n      this.dispatchEvent(new CustomEvent('custom-scroll', {\n        bubbles: false,\n        composed: true\n      }));\n      this._mayHaveMomentum = true;\n    }\n\n    this._preventScrollEvent = false;\n    this._debouncerScrollFinish = Debouncer.debounce(this._debouncerScrollFinish, timeOut.after(200), () => {\n      var scrollerRect = this.$.scroller.getBoundingClientRect();\n\n      if (!this._isVisible(this._buffers[0], scrollerRect) && !this._isVisible(this._buffers[1], scrollerRect)) {\n        this.position = this.position;\n      }\n    });\n  }\n  /**\n   * Current scroller position as index. Can be a fractional number.\n   *\n   * @type {Number}\n   */\n\n\n  set position(index) {\n    this._preventScrollEvent = true;\n\n    if (index > this._firstIndex && index < this._firstIndex + this.bufferSize * 2) {\n      this.$.scroller.scrollTop = this.itemHeight * (index - this._firstIndex) + this._buffers[0].translateY;\n    } else {\n      this._initialIndex = ~~index;\n\n      this._reset();\n\n      this._scrollDisabled = true;\n      this.$.scroller.scrollTop += index % 1 * this.itemHeight;\n      this._scrollDisabled = false;\n    }\n\n    if (this._mayHaveMomentum) {\n      // Stop the possible iOS Safari momentum with -webkit-overflow-scrolling: auto;\n      this.$.scroller.classList.add('notouchscroll');\n      this._mayHaveMomentum = false;\n      setTimeout(() => {\n        // Restore -webkit-overflow-scrolling: touch; after a small delay.\n        this.$.scroller.classList.remove('notouchscroll');\n      }, 10);\n    }\n  }\n  /**\n   * @private\n   */\n\n\n  get position() {\n    return (this.$.scroller.scrollTop - this._buffers[0].translateY) / this.itemHeight + this._firstIndex;\n  }\n\n  get itemHeight() {\n    if (!this._itemHeightVal) {\n      if (!(window.ShadyCSS && window.ShadyCSS.nativeCss)) {\n        this.updateStyles();\n      }\n\n      const itemHeight = window.ShadyCSS ? window.ShadyCSS.getComputedStyleValue(this, '--vaadin-infinite-scroller-item-height') : getComputedStyle(this).getPropertyValue('--vaadin-infinite-scroller-item-height'); // Use background-position temp inline style for unit conversion\n\n      const tmpStyleProp = 'background-position';\n      this.$.fullHeight.style.setProperty(tmpStyleProp, itemHeight);\n      const itemHeightPx = getComputedStyle(this.$.fullHeight).getPropertyValue(tmpStyleProp);\n      this.$.fullHeight.style.removeProperty(tmpStyleProp);\n      this._itemHeightVal = parseFloat(itemHeightPx);\n    }\n\n    return this._itemHeightVal;\n  }\n\n  get _bufferHeight() {\n    return this.itemHeight * this.bufferSize;\n  }\n\n  _reset() {\n    this._scrollDisabled = true;\n    this.$.scroller.scrollTop = this._initialScroll;\n    this._buffers[0].translateY = this._initialScroll - this._bufferHeight;\n    this._buffers[1].translateY = this._initialScroll;\n\n    this._buffers.forEach(buffer => {\n      buffer.style.transform = 'translate3d(0, ' + buffer.translateY + 'px, 0)';\n    });\n\n    this._buffers[0].updated = this._buffers[1].updated = false;\n\n    this._updateClones(true);\n\n    this._debouncerUpdateClones = Debouncer.debounce(this._debouncerUpdateClones, timeOut.after(200), () => {\n      this._buffers[0].updated = this._buffers[1].updated = false;\n\n      this._updateClones();\n    });\n    this._scrollDisabled = false;\n  }\n\n  _createPool() {\n    var container = this.getBoundingClientRect();\n\n    this._buffers.forEach(buffer => {\n      for (var i = 0; i < this.bufferSize; i++) {\n        const itemWrapper = document.createElement('div');\n        itemWrapper.style.height = this.itemHeight + 'px';\n        itemWrapper.instance = {};\n        const contentId = InfiniteScrollerElement._contentIndex = InfiniteScrollerElement._contentIndex + 1 || 0;\n        const slotName = 'vaadin-infinite-scroller-item-content-' + contentId;\n        const insertionPoint = document.createElement('slot');\n        insertionPoint.setAttribute('name', slotName);\n        insertionPoint._itemWrapper = itemWrapper;\n        buffer.appendChild(insertionPoint);\n        itemWrapper.setAttribute('slot', slotName);\n        this.appendChild(itemWrapper); // This is needed by IE\n\n        flush();\n        setTimeout(() => {\n          // Only stamp the visible instances first\n          if (this._isVisible(itemWrapper, container)) {\n            this._ensureStampedInstance(itemWrapper);\n          }\n        }, 1); // Wait for first reset\n      }\n    }, this);\n\n    setTimeout(() => {\n      afterNextRender(this, this._finishInit.bind(this));\n    }, 1);\n  }\n\n  _ensureStampedInstance(itemWrapper) {\n    if (itemWrapper.firstElementChild) {\n      return;\n    }\n\n    var tmpInstance = itemWrapper.instance;\n    itemWrapper.instance = new this._TemplateClass({});\n    itemWrapper.appendChild(itemWrapper.instance.root);\n    Object.keys(tmpInstance).forEach(prop => {\n      itemWrapper.instance.set(prop, tmpInstance[prop]);\n    });\n  }\n\n  _updateClones(viewPortOnly) {\n    this._firstIndex = ~~((this._buffers[0].translateY - this._initialScroll) / this.itemHeight) + this._initialIndex;\n    var scrollerRect = viewPortOnly ? this.$.scroller.getBoundingClientRect() : undefined;\n\n    this._buffers.forEach((buffer, bufferIndex) => {\n      if (!buffer.updated) {\n        var firstIndex = this._firstIndex + this.bufferSize * bufferIndex;\n        [].forEach.call(buffer.children, (insertionPoint, index) => {\n          const itemWrapper = insertionPoint._itemWrapper;\n\n          if (!viewPortOnly || this._isVisible(itemWrapper, scrollerRect)) {\n            itemWrapper.instance.index = firstIndex + index;\n          }\n        });\n        buffer.updated = true;\n      }\n    }, this);\n  }\n\n  _isVisible(element, container) {\n    var rect = element.getBoundingClientRect();\n    return rect.bottom > container.top && rect.top < container.bottom;\n  }\n\n}\n\ncustomElements.define(InfiniteScrollerElement.is, InfiniteScrollerElement);","map":null,"metadata":{},"sourceType":"module"}