{"ast":null,"code":"import { DomModule } from '@polymer/polymer/lib/elements/dom-module.js';\nimport { ThemePropertyMixin } from './vaadin-theme-property-mixin.js';\n/**\n * @polymerMixin\n * @mixes Vaadin.ThemePropertyMixin\n */\n\nexport const ThemableMixin = superClass => class VaadinThemableMixin extends ThemePropertyMixin(superClass) {\n  /** @protected */\n  static finalize() {\n    super.finalize();\n    const template = this.prototype._template;\n    const hasOwnTemplate = this.template && this.template.parentElement && this.template.parentElement.id === this.is;\n\n    const inheritedTemplate = Object.getPrototypeOf(this.prototype)._template;\n\n    if (inheritedTemplate && !hasOwnTemplate) {\n      // The element doesn't define its own template -> include the theme modules from the inherited template\n      Array.from(inheritedTemplate.content.querySelectorAll('style[include]')).forEach(s => {\n        this._includeStyle(s.getAttribute('include'), template);\n      });\n    }\n\n    this._includeMatchingThemes(template);\n  }\n  /** @protected */\n\n\n  static _includeMatchingThemes(template) {\n    const domModule = DomModule;\n    const modules = domModule.prototype.modules;\n    let hasThemes = false;\n    const defaultModuleName = this.is + '-default-theme';\n    Object.keys(modules).sort((moduleNameA, moduleNameB) => {\n      const vaadinA = moduleNameA.indexOf('vaadin-') === 0;\n      const vaadinB = moduleNameB.indexOf('vaadin-') === 0;\n      const vaadinThemePrefixes = ['lumo-', 'material-'];\n      const vaadinThemeA = vaadinThemePrefixes.filter(prefix => moduleNameA.indexOf(prefix) === 0).length > 0;\n      const vaadinThemeB = vaadinThemePrefixes.filter(prefix => moduleNameB.indexOf(prefix) === 0).length > 0;\n\n      if (vaadinA !== vaadinB) {\n        // Include vaadin core styles first\n        return vaadinA ? -1 : 1;\n      } else if (vaadinThemeA !== vaadinThemeB) {\n        // Include vaadin theme styles after that\n        return vaadinThemeA ? -1 : 1;\n      } else {\n        // Lastly include custom styles so they override all vaadin styles\n        return 0;\n      }\n    }).forEach(moduleName => {\n      if (moduleName !== defaultModuleName) {\n        const themeFor = modules[moduleName].getAttribute('theme-for');\n\n        if (themeFor) {\n          themeFor.split(' ').forEach(themeForToken => {\n            if (new RegExp('^' + themeForToken.split('*').join('.*') + '$').test(this.is)) {\n              hasThemes = true;\n\n              this._includeStyle(moduleName, template);\n            }\n          });\n        }\n      }\n    });\n\n    if (!hasThemes && modules[defaultModuleName]) {\n      // No theme modules found, include the default module if it exists\n      this._includeStyle(defaultModuleName, template);\n    }\n  }\n  /** @private */\n\n\n  static _includeStyle(moduleName, template) {\n    if (template && !template.content.querySelector(\"style[include=\\\"\".concat(moduleName, \"\\\"]\"))) {\n      const styleEl = document.createElement('style');\n      styleEl.setAttribute('include', moduleName);\n      template.content.appendChild(styleEl);\n    }\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}